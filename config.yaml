---
# Slurm config bwuni gpu
name: "SLURM"   # MUST BE "SLURM"
partition: "gpu_4"  # "single" for cpu, "gpu_4" or gpu_8" for gpu
job-name: "test" # this will be the experiment's name in slurm
num_parallel_jobs: 1  # max number of jobs executed in parallel
ntasks: 1   #  leave that like it is
cpus-per-task: 4   # there are 5 cores for each GPU on the gpu_8 queue and 10 per GPU on the gpu_4 queue. Never use 5! don't ask why!
time: 1200   # in minutes
sbatch_args:   # gpus need to be explicitly requested using this
  gres: "gpu:1" #and this
slurm_log: "../output/slurmlog/"

---
# DEFAULT parameters (Optional)
name: "DEFAULT"   #  useful for paralellization. defaults to 1.
reps_in_parallel: 1 # number of repetitions in each job that are executed in parallel. defaults to 1.
reps_per_job: 1 # number of repetitions in each job.
repetitions: 1  # number of times one set of parameters is run

params:
  # this is where you specify all parameters needed for your experiment.MUST BE DEFAULT
  path: "output"   # location to save results in

---
name: "ModelNetClassification"
path: "output"
repetitions: 1   # repeat 8 times

# Experiment Parameters
params:
  algorithm: 'torus_com_prediction' # voxel_point_prediction
  run_name: 'torus_com_prediction_mesh'
  input: 'mesh'
  save: True
  wandb: True
  num_epochs: 25
  lr: 0.001

---
name: "ModelNetClassification"
path: "output"
repetitions: 1   # repeat 8 times

# Experiment Parameters
params:
  algorithm: 'torus_pos_prediction' # voxel_point_prediction
  run_name: 'torus_pos_prediction_mesh'
  input: 'mesh'
  save: False
  wandb: True
  num_epochs: 25
  lr: 0.001

---
name: "ModelNetClassification"
path: "output"
repetitions: 1   # repeat 8 times

# Experiment Parameters
params:
  algorithm: 'torus_com_prediction' # voxel_point_prediction
  run_name: 'torus_com_prediction_pcd'
  input: 'pcd'
  save: False
  wandb: True
  num_epochs: 20
  lr: 0.001

---
name: "ModelNetClassification"
path: "output"
repetitions: 1   # repeat 8 times

# Experiment Parameters
params:
  algorithm: 'torus_com_prediction' # voxel_point_prediction
  run_name: 'torus_com_prediction_pcd_without_noise'
  input: 'pcd_without_noise'
  save: False
  wandb: False
  num_epochs: 10
  lr: 0.001

---
name: "ModelNetClassification"
path: "output"
repetitions: 1   # repeat 8 times

# Experiment Parameters
params:
  algorithm: 'torus_pos_prediction' # voxel_point_prediction
  run_name: 'torus_pos_prediction_mesh'
  input: 'mesh'
  save: False
  wandb: True
  num_epochs: 25
  lr: 0.0005

---
name: "ModelNetClassification"
path: "output"
repetitions: 1   # repeat 8 times

# Experiment Parameters
params:
  algorithm: 'torus_pos_prediction' # voxel_point_prediction
  run_name: 'torus_pos_prediction_pcd_without_noise'
  input: 'pcd_without_noise'
  save: False
  wandb: True
  num_epochs: 25
  lr: 0.0005

---
name: "ModelNetClassification"
path: "output"
repetitions: 1   # repeat 8 times

# Experiment Parameters
params:
  algorithm: 'torus_pos_prediction' # voxel_point_prediction
  run_name: 'torus_pos_prediction_pcd'
  input: 'pcd'
  save: False
  wandb: True
  num_epochs: 25
  lr: 0.0005

#---
#name: "EXP1"
#path: "output"
#repetitions: 1   # repeat 8 times
#
## Experiment Parameters
#params:
#  algorithm: 'torus_com_prediction' # voxel_point_prediction
#  run_name: 'torus_test'
#  wandb: False
#  num_epochs: 200
#  track_point_index: 67

